import { supabase, initializeDatabase, storeChatMessage } from '../utils/supabase.js';

// Initialize database on first deployment
let dbInitialized = false;

export default async function handler(req, res) {
    // Enable CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        res.status(200).end();
        return;
    }

    if (req.method !== 'POST') {
        res.status(405).json({ error: 'Method not allowed' });
        return;
    }

    // Initialize database if not done yet
    if (!dbInitialized && supabase) {
        console.log('üîß Initializing database on first request...');
        dbInitialized = await initializeDatabase();
    }

    try {
        const { 
            query, 
            message,
            isVoiceInput = false, 
            requestVoiceResponse = false, 
            detectedLanguage = 'hinglish',
            browserLanguage = 'hi-IN',
            userId = 'anonymous' 
        } = req.body;

        const userMessage = query || message;

        if (!userMessage || userMessage.trim().length === 0) {
            res.status(400).json({ error: 'Query is required' });
            return;
        }

        // Generate session ID for tracking
        const sessionId = req.headers['x-session-id'] || 'session-' + Date.now();

        // Store user query in database with language context
        await storeChatMessage(userId, userMessage, 'user', {
            isVoiceInput,
            sessionId,
            category: 'health',
            detectedLanguage,
            browserLanguage
        });

        // Process the health query with multiple AI providers (Gemini prioritized)
        const response = await processHealthQueryWithAI(userMessage, detectedLanguage);

        if (!response) {
            throw new Error('Failed to process health query');
        }

        // Store bot response in database with language context
        await storeChatMessage(userId, response.message || response, 'bot', {
            isVoiceOutput: requestVoiceResponse,
            sessionId,
            category: 'health',
            confidence: response.confidence || 0.75,
            language: response.language || detectedLanguage
        });

        res.status(200).json({
            message: response.message || response,
            voiceResponse: requestVoiceResponse,
            timestamp: new Date().toISOString(),
            sessionId: sessionId,
            category: 'health',
            language: response.language || detectedLanguage,
            confidence: response.confidence || 0.75
        });

    } catch (error) {
        console.error('API Error:', error);
        
        // Enhanced error messages based on language preference
        const errorMessages = {
            'hindi': '‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§è‡§ï ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§',
            'english': 'Sorry, a technical issue occurred. Please try again later.',
            'hinglish': '‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, technical problem ‡§π‡•Å‡§à ‡§π‡•à‡•§ Please ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç try ‡§ï‡§∞‡•á‡§Ç‡•§'
        };
        
        res.status(500).json({
            error: 'Internal server error',
            message: errorMessages[req.body.detectedLanguage] || errorMessages['hinglish']
        });
    }
}

// Multi-provider AI function with Gemini prioritized first
async function processHealthQueryWithAI(message, language = 'hinglish') {
    try {
        let response;
        let aiProvider = 'fallback';

        // Priority 1: Gemini API (Free tier available - RECOMMENDED)
        if (process.env.GEMINI_API_KEY && process.env.GEMINI_API_KEY !== 'your_gemini_api_key_here_free_tier_available') {
            console.log('üîÆ Using Gemini API...');
            try {
                response = await getGeminiResponse(message, language);
                aiProvider = 'gemini';
            } catch (error) {
                console.log('‚ö†Ô∏è Gemini API failed, trying next option...');
                response = null;
            }
        }
        
        // Priority 2: Hugging Face API (Free tier - BACKUP)
        if (!response && process.env.HUGGINGFACE_API_KEY && process.env.HUGGINGFACE_API_KEY !== 'your_huggingface_token_here_free_tier_available') {
            console.log('ÔøΩ Using Hugging Face API...');
            try {
                response = await getHuggingFaceResponse(message, language);
                aiProvider = 'huggingface';
            } catch (error) {
                console.log('‚ö†Ô∏è Hugging Face API failed, trying next option...');
                response = null;
            }
        }
        
        // Priority 3: OpenAI API (OPTIONAL - Requires billing)
        if (!response && process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY !== 'sk-your_openai_api_key_here_requires_5_dollar_billing') {
            console.log('ÔøΩ Using OpenAI API...');
            try {
                response = await getOpenAIResponse(message, language);
                aiProvider = 'openai';
            } catch (error) {
                console.log('‚ö†Ô∏è OpenAI API failed, using fallback...');
                response = null;
            }
        }
        
        // Fallback: Enhanced local responses (ALWAYS WORKS)
        if (!response) {
            console.log('üí¨ Using enhanced fallback responses...');
            response = getEnhancedFallbackResponse(message, language);
            aiProvider = 'enhanced_fallback';
        }

        return {
            message: response,
            confidence: aiProvider === 'fallback' ? 0.7 : 0.85,
            language: language,
            category: 'health',
            provider: aiProvider
        };

    } catch (error) {
        console.error('AI Processing Error:', error);
        return {
            message: getEnhancedFallbackResponse(message, language),
            confidence: 0.7,
            language: language,
            category: 'health',
            provider: 'emergency_fallback'
        };
    }
}

// Gemini API function (Google - Free tier available)
async function getGeminiResponse(message, language) {
    try {
        const prompt = createHealthPrompt(message, language);
        
        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${process.env.GEMINI_API_KEY}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                contents: [{
                    parts: [{ text: prompt }]
                }],
                generationConfig: {
                    temperature: 0.7,
                    topK: 40,
                    topP: 0.95,
                    maxOutputTokens: 300,
                },
                safetySettings: [
                    {
                        category: "HARM_CATEGORY_MEDICAL",
                        threshold: "BLOCK_ONLY_HIGH"
                    }
                ]
            })
        });

        if (!response.ok) {
            throw new Error(`Gemini API error: ${response.status}`);
        }

        const data = await response.json();
        return data.candidates[0].content.parts[0].text;
        
    } catch (error) {
        console.error('Gemini API Error:', error);
        throw error;
    }
}

// OpenAI API function (Requires billing - $5 minimum)
async function getOpenAIResponse(message, language) {
    try {
        const prompt = createHealthPrompt(message, language);
        
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: "gpt-3.5-turbo",
                messages: [{ role: "user", content: prompt }],
                max_tokens: 300,
                temperature: 0.7,
            })
        });

        if (!response.ok) {
            throw new Error(`OpenAI API error: ${response.status}`);
        }

        const data = await response.json();
        return data.choices[0].message.content;
        
    } catch (error) {
        console.error('OpenAI API Error:', error);
        throw error;
    }
}

// Hugging Face API function (Free tier available)
async function getHuggingFaceResponse(message, language) {
    try {
        const prompt = createHealthPrompt(message, language);
        
        const response = await fetch('https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${process.env.HUGGINGFACE_API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                inputs: prompt,
                parameters: { max_length: 200, temperature: 0.7 }
            })
        });

        if (!response.ok) {
            throw new Error(`Hugging Face API error: ${response.status}`);
        }

        const data = await response.json();
        return data[0].generated_text;
        
    } catch (error) {
        console.error('Hugging Face API Error:', error);
        throw error;
    }
}

// Enhanced fallback responses for demo/offline mode
function getEnhancedFallbackResponse(message, language) {
    const msg = message.toLowerCase();
    
    // Comprehensive health responses database
    const healthResponses = {
        hindi: {
            // Common symptoms
            fever: "‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è: 1) ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç 2) ‡§ñ‡•Ç‡§¨ ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç 3) ‡§π‡§≤‡•ç‡§ï‡§æ ‡§≠‡•ã‡§ú‡§® ‡§≤‡•á‡§Ç‡•§ 102¬∞F ‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§π‡•ã ‡§Ø‡§æ 3 ‡§¶‡§ø‡§® ‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§∞‡§π‡•á ‡§§‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç‡•§",
            headache: "‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è: 1) ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç 2) ‡§Ü‡§Ç‡§ñ‡•ã‡§Ç ‡§ï‡•ã ‡§Ü‡§∞‡§æ‡§Æ ‡§¶‡•á‡§Ç 3) ‡§Æ‡§æ‡§•‡•á ‡§™‡§∞ ‡§†‡§Ç‡§°‡•Ä ‡§™‡§ü‡•ç‡§ü‡•Ä ‡§∞‡§ñ‡•á‡§Ç‡•§ ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§Ø‡§æ ‡§§‡•á‡§ú ‡§¶‡§∞‡•ç‡§¶ ‡§π‡•ã ‡§§‡•ã ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§",
            cough: "‡§ñ‡§æ‡§Ç‡§∏‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è: 1) ‡§ó‡§∞‡•ç‡§Æ ‡§™‡§æ‡§®‡•Ä ‡§Æ‡•á‡§Ç ‡§®‡§Æ‡§ï ‡§°‡§æ‡§≤‡§ï‡§∞ ‡§ó‡§∞‡§æ‡§∞‡•á ‡§ï‡§∞‡•á‡§Ç 2) ‡§∂‡§π‡§¶ ‡§î‡§∞ ‡§Ö‡§¶‡§∞‡§ï ‡§ï‡§æ ‡§∏‡•á‡§µ‡§® ‡§ï‡§∞‡•á‡§Ç 3) ‡§ß‡•Ç‡§Æ‡•ç‡§∞‡§™‡§æ‡§® ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç‡•§ 2 ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§ñ‡§æ‡§Ç‡§∏‡•Ä ‡§π‡•ã ‡§§‡•ã ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•ã ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç‡•§",
            stomach: "‡§™‡•á‡§ü ‡§¶‡§∞‡•ç‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è: 1) ‡§π‡§≤‡•ç‡§ï‡§æ ‡§≠‡•ã‡§ú‡§® ‡§ï‡§∞‡•á‡§Ç 2) ‡§§‡§≤‡•Ä ‡§π‡•Å‡§à ‡§ö‡•Ä‡§ú‡•ã‡§Ç ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç 3) ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç‡•§ ‡§§‡•á‡§ú ‡§¶‡§∞‡•ç‡§¶ ‡§Ø‡§æ ‡§â‡§≤‡•ç‡§ü‡•Ä ‡§π‡•ã ‡§§‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§ú‡§æ‡§è‡§Ç‡•§",
            diabetes: "‡§Æ‡§ß‡•Å‡§Æ‡•á‡§π ‡§ï‡•á ‡§≤‡§ø‡§è: 1) ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç 2) ‡§Æ‡•Ä‡§†‡§æ ‡§ï‡§Æ ‡§ï‡§∞‡•á‡§Ç 3) ‡§∏‡§Æ‡§Ø ‡§™‡§∞ ‡§¶‡§µ‡§æ ‡§≤‡•á‡§Ç 4) ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§è‡§Ç‡•§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à‡•§",
            blood_pressure: "‡§â‡§ö‡•ç‡§ö ‡§∞‡§ï‡•ç‡§§‡§ö‡§æ‡§™ ‡§ï‡•á ‡§≤‡§ø‡§è: 1) ‡§®‡§Æ‡§ï ‡§ï‡§Æ ‡§ï‡§∞‡•á‡§Ç 2) ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ü‡§π‡§≤‡•á‡§Ç 3) ‡§§‡§®‡§æ‡§µ ‡§ï‡§Æ ‡§ï‡§∞‡•á‡§Ç 4) ‡§ß‡•Ç‡§Æ‡•ç‡§∞‡§™‡§æ‡§® ‡§õ‡•ã‡§°‡§º‡•á‡§Ç‡•§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§è‡§Ç‡•§",
            cold: "‡§∏‡§∞‡•ç‡§¶‡•Ä-‡§ú‡•Å‡§ï‡§æ‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è: 1) ‡§ó‡§∞‡•ç‡§Æ ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç 2) ‡§≠‡§æ‡§™ ‡§≤‡•á‡§Ç 3) ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç 4) ‡§µ‡§ø‡§ü‡§æ‡§Æ‡§ø‡§® C ‡§≤‡•á‡§Ç‡•§ ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§¨‡§¢‡§º‡§®‡•á ‡§™‡§∞ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç‡•§",
            general: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡§≤‡§æ‡§π: 1) ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§Ü‡§π‡§æ‡§∞ ‡§≤‡•á‡§Ç 2) ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç 3) ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§®‡•Ä‡§Ç‡§¶ ‡§≤‡•á‡§Ç 4) ‡§§‡§®‡§æ‡§µ ‡§ï‡§Æ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§"
        },
        english: {
            fever: "For fever: 1) Get adequate rest 2) Drink plenty of water 3) Eat light food. If fever exceeds 102¬∞F or persists for more than 3 days, consult a doctor immediately.",
            headache: "For headaches: 1) Drink sufficient water 2) Rest your eyes 3) Apply cold compress on forehead. For persistent or severe pain, consult a doctor.",
            cough: "For cough: 1) Gargle with warm salt water 2) Take honey and ginger 3) Avoid smoking. If cough persists for more than 2 weeks, see a doctor.",
            stomach: "For stomach pain: 1) Eat light food 2) Avoid fried items 3) Drink sufficient water. For severe pain or vomiting, see a doctor immediately.",
            diabetes: "For diabetes: 1) Exercise regularly 2) Reduce sugar intake 3) Take medicines on time 4) Get regular checkups. Doctor's advice is essential.",
            blood_pressure: "For high blood pressure: 1) Reduce salt 2) Walk regularly 3) Manage stress 4) Quit smoking. Regular checkups with doctor are important.",
            cold: "For cold/flu: 1) Drink warm water 2) Take steam 3) Get rest 4) Take Vitamin C. If symptoms worsen, consult a doctor.",
            general: "General health advice: 1) Eat balanced diet 2) Exercise regularly 3) Get adequate sleep 4) Manage stress. For any serious issues, consult a doctor."
        },
        hinglish: {
            fever: "Fever ‡§ï‡•á ‡§≤‡§ø‡§è: 1) Proper rest ‡§ï‡§∞‡•á‡§Ç 2) ‡§™‡§æ‡§®‡•Ä ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ drink ‡§ï‡§∞‡•á‡§Ç 3) Light food ‡§≤‡•á‡§Ç‡•§ 102¬∞F ‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§Ø‡§æ 3 ‡§¶‡§ø‡§® ‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ fever ‡§π‡•ã ‡§§‡•ã doctor ‡§ï‡•ã immediately ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç‡•§",
            headache: "Headache ‡§ï‡•á ‡§≤‡§ø‡§è: 1) ‡§™‡§æ‡§®‡•Ä ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§™‡§ø‡§è‡§Ç 2) Eyes ‡§ï‡•ã rest ‡§¶‡•á‡§Ç 3) Forehead ‡§™‡§∞ cold compress ‡§∞‡§ñ‡•á‡§Ç‡•§ Continuous ‡§Ø‡§æ severe pain ‡§π‡•ã ‡§§‡•ã doctor ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç‡•§",
            cough: "Cough ‡§ï‡•á ‡§≤‡§ø‡§è: 1) Warm salt water ‡§∏‡•á gargle ‡§ï‡§∞‡•á‡§Ç 2) Honey ‡§î‡§∞ ginger ‡§≤‡•á‡§Ç 3) Smoking avoid ‡§ï‡§∞‡•á‡§Ç‡•§ 2 weeks ‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ cough ‡§π‡•ã ‡§§‡•ã doctor ‡§ï‡•ã ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç‡•§",
            stomach: "Stomach pain ‡§ï‡•á ‡§≤‡§ø‡§è: 1) Light food ‡§ñ‡§æ‡§è‡§Ç 2) Fried items avoid ‡§ï‡§∞‡•á‡§Ç 3) ‡§™‡§æ‡§®‡•Ä ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§™‡§ø‡§è‡§Ç‡•§ Severe pain ‡§Ø‡§æ vomiting ‡§π‡•ã ‡§§‡•ã doctor ‡§ï‡•ã immediately ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç‡•§",
            diabetes: "Diabetes ‡§ï‡•á ‡§≤‡§ø‡§è: 1) Regular exercise ‡§ï‡§∞‡•á‡§Ç 2) Sugar ‡§ï‡§Æ ‡§ï‡§∞‡•á‡§Ç 3) Medicine time ‡§™‡§∞ ‡§≤‡•á‡§Ç 4) Regular checkup ‡§ï‡§∞‡§æ‡§è‡§Ç‡•§ Doctor ‡§ï‡•Ä advice ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à‡•§",
            blood_pressure: "High BP ‡§ï‡•á ‡§≤‡§ø‡§è: 1) Salt ‡§ï‡§Æ ‡§ï‡§∞‡•á‡§Ç 2) Daily walk ‡§ï‡§∞‡•á‡§Ç 3) Stress manage ‡§ï‡§∞‡•á‡§Ç 4) Smoking quit ‡§ï‡§∞‡•á‡§Ç‡•§ Doctor ‡§∏‡•á regular checkup ‡§ï‡§∞‡§æ‡§è‡§Ç‡•§",
            cold: "Cold/flu ‡§ï‡•á ‡§≤‡§ø‡§è: 1) Warm ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç 2) Steam ‡§≤‡•á‡§Ç 3) Rest ‡§ï‡§∞‡•á‡§Ç 4) Vitamin C ‡§≤‡•á‡§Ç‡•§ Symptoms ‡§¨‡§¢‡§º‡•á‡§Ç ‡§§‡•ã doctor ‡§ï‡•ã ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç‡•§",
            general: "Health ‡§ï‡•á ‡§≤‡§ø‡§è general advice: 1) Balanced diet ‡§≤‡•á‡§Ç 2) Regular exercise ‡§ï‡§∞‡•á‡§Ç 3) Proper sleep ‡§≤‡•á‡§Ç 4) Stress ‡§ï‡§Æ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§ï‡•ã‡§à serious problem ‡§π‡•ã ‡§§‡•ã doctor ‡§∏‡•á advice ‡§≤‡•á‡§Ç‡•§"
        }
    };

    const langResponses = healthResponses[language] || healthResponses.hinglish;
    
    // Enhanced keyword matching for better responses
    if (msg.includes('fever') || msg.includes('‡§¨‡•Å‡§ñ‡§æ‡§∞') || msg.includes('‡§§‡§æ‡§™‡§Æ‡§æ‡§®')) 
        return langResponses.fever;
    if (msg.includes('headache') || msg.includes('‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶') || msg.includes('‡§∏‡§ø‡§∞ ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§¶')) 
        return langResponses.headache;
    if (msg.includes('cough') || msg.includes('‡§ñ‡§æ‡§Ç‡§∏‡•Ä') || msg.includes('‡§ñ‡§æ‡§Å‡§∏‡•Ä')) 
        return langResponses.cough;
    if (msg.includes('stomach') || msg.includes('‡§™‡•á‡§ü') || msg.includes('pet dard')) 
        return langResponses.stomach;
    if (msg.includes('diabetes') || msg.includes('‡§Æ‡§ß‡•Å‡§Æ‡•á‡§π') || msg.includes('sugar') || msg.includes('‡§∂‡•Å‡§ó‡§∞')) 
        return langResponses.diabetes;
    if (msg.includes('blood pressure') || msg.includes('bp') || msg.includes('‡§∞‡§ï‡•ç‡§§‡§ö‡§æ‡§™') || msg.includes('‡§π‡§æ‡§à ‡§¨‡•Ä‡§™‡•Ä')) 
        return langResponses.blood_pressure;
    if (msg.includes('cold') || msg.includes('flu') || msg.includes('‡§∏‡§∞‡•ç‡§¶‡•Ä') || msg.includes('‡§ú‡•Å‡§ï‡§æ‡§Æ')) 
        return langResponses.cold;
    
    return langResponses.general;
}

// Keep the old function name for backward compatibility
function getFallbackResponse(message, language) {
    return getEnhancedFallbackResponse(message, language);
}

// Create health-focused prompts based on language
function createHealthPrompt(message, language) {
    const prompts = {
        hindi: `‡§Ü‡§™ ‡§è‡§ï ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•à‡§Ç‡•§ ‡§ï‡•á‡§µ‡§≤ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç‡•§ ‡§Ø‡§¶‡§ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§µ‡§ø‡§®‡§Æ‡•ç‡§∞‡§§‡§æ ‡§∏‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§π‡•á‡§Ç‡•§ ‡§π‡§Æ‡•á‡§∂‡§æ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§®‡•á ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®: ${message}`,
        english: `You are an Indian health assistant. Only answer health-related questions. If the question is not health-related, politely ask for a health question. Always recommend consulting a doctor. Question: ${message}`,
        hinglish: `‡§Ü‡§™ ‡§è‡§ï Indian health assistant ‡§π‡•à‡§Ç‡•§ Sirf health related questions ‡§ï‡§æ answer ‡§¶‡•á‡§Ç‡•§ ‡§Ö‡§ó‡§∞ question health ‡§∏‡•á related ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã politely health question ‡§™‡•Ç‡§õ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§π‡•á‡§Ç‡•§ ‡§π‡§Æ‡•á‡§∂‡§æ doctor ‡§∏‡•á consult ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä recommend ‡§ï‡§∞‡•á‡§Ç‡•§ Question: ${message}`
    };
    
    return prompts[language] || prompts.hinglish;
}